{"version":3,"sources":["utils.js","State.js","sw.js"],"names":["timeToString","ms","secs","Math","floor","min","toString","padStart","uuidv4","replace","c","r","random","v","getTimerTime","timer","time","length","state","Date","now","timestamp","duration","max","getArrayDiff","oldArray","newArray","deletedTimers","addedTimers","find","t","id","push","DB","onready","constructor","stateObject","dbName","storeName","version","db","initDatabase","request","globalThis","indexedDB","open","onerror","event","console","error","target","name","message","onupgradeneeded","result","objectStore","createObjectStore","keyPath","scheme","title","createIndex","unique","key","transaction","oncomplete","bjectStore","timers","forEach","add","onsuccess","errorCode","startTransation","callback","getTimers","Promise","resolve","reject","getAll","deleteTimer","delete","addTimer","saveTimers","requestUpdate","put","currentTimer","addEventListener","e","then","dbTimers","diff","State","setState","TimerEvent","Event","setInterval","getState","evnt","dispatchEvent","parent","Object","assign","createTimer","options","updateTimer","timerId","getTimerById","index","indexOf","splice","startTimer","stopTimer","resetTimer","sendTimerNotification","self","registration","showNotification","body","vibrate","requireInteraction","actions","action","notification","close","waitUntil","caches","cache","addAll","respondWith","match","response","fetch","log"],"mappings":"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","file":"sw.js","sourceRoot":"..\\src","sourcesContent":["export function timeToString(ms) {\r\n    const secs = Math.floor(ms / 1000) % 60;\r\n    const min = Math.floor(ms / 60 / 1000) % 60;\r\n    const h = Math.floor(ms / 60 / 60 / 1000);\r\n\r\n    return `${h.toString().padStart(2, '0')}:${min.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n}\r\n\r\nexport function uuidv4() {\r\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n\t\tvar r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n\t\treturn v.toString(16);\r\n\t});\r\n}\r\n\r\nexport function getTimerTime(timer) {\r\n    let time = timer.length;\r\n\r\n    if(timer.state === 1) {\r\n      time = timer.length - ((Date.now() - timer.timestamp) + timer.duration);\r\n    }\r\n    if(timer.state === 0 && timer.duration > 0) {\r\n      time = timer.length - timer.duration;\r\n    }\r\n    time = Math.max(time, 0);\r\n\r\n    return time;\r\n}\r\n\r\nexport function getArrayDiff(oldArray, newArray) {\r\n  const deletedTimers = [];\r\n  const addedTimers = [];\r\n\r\n  for (let timer of oldArray) {\r\n    const lokalTimer = newArray.find(t => t.id === timer.id);\r\n    if (!lokalTimer) {\r\n      addedTimers.push(timer);\r\n    }\r\n  }\r\n  for (let timer of newArray) {\r\n    const stateTimer = oldArray.find(t => t.id === timer.id);\r\n    if (!stateTimer) {\r\n      deletedTimers.push(timer);\r\n    }\r\n  }\r\n\r\n  return [deletedTimers, addedTimers];\r\n}\r\n","import { getArrayDiff, getTimerTime, uuidv4 } from \"./utils.js\";\r\n\r\nclass DB {\r\n\r\n  onready() { }\r\n\r\n  constructor(stateObject) {\r\n    this.state = stateObject;\r\n    this.dbName = \"Timers\";\r\n    this.storeName = \"timers\";\r\n    this.version = 1;\r\n    this.db = null;\r\n\r\n    this.initDatabase();\r\n  }\r\n\r\n  initDatabase() {\r\n    const request = globalThis.indexedDB.open(this.dbName, this.version);\r\n\r\n    request.onerror = event => {\r\n      console.error(\"Database error:\", event.target.error.name + ':', event.target.error.message);\r\n    };\r\n    request.onupgradeneeded = event => {\r\n      const db = event.target.result;\r\n      const objectStore = db.createObjectStore(this.storeName, { keyPath: \"id\" });\r\n\r\n      const scheme = {\r\n          length: \"length\", // ms\r\n          title: \"title\",\r\n          timestamp: \"timestamp\",\r\n          state: \"state\",\r\n          duration: \"duration\"\r\n      }\r\n\r\n      objectStore.createIndex(\"id\", \"id\", { unique: true });\r\n      for(let key in scheme) {\r\n        objectStore.createIndex(key, scheme[key], { unique: false });\r\n      }\r\n\r\n      objectStore.transaction.oncomplete = event => {\r\n        const bjectStore = db.transaction(this.storeName, \"readwrite\").objectStore(this.storeName);\r\n\r\n        this.state.timers.forEach(timer => {\r\n          bjectStore.add(timer);\r\n        });\r\n      };\r\n    };\r\n    request.onsuccess = event => {\r\n      this.db = event.target.result;\r\n\r\n      db.onerror = event => {\r\n        console.error(\"Database error: \" + event.target.errorCode);\r\n      };\r\n\r\n      this.onready();\r\n    };\r\n  }\r\n\r\n  startTransation(callback = () => { }) {\r\n    const transaction = this.db.transaction([this.storeName], \"readwrite\");\r\n\r\n    transaction.oncomplete = event => {\r\n      callback();\r\n    };\r\n\r\n    transaction.onerror = event => {\r\n      callback(event);\r\n    };\r\n\r\n    return transaction;\r\n  }\r\n\r\n  async getTimers() {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.startTransation();\r\n      const objectStore = transaction.objectStore(this.storeName);\r\n      const request = objectStore.getAll();\r\n      request.onerror = event => {\r\n        reject(event);\r\n      };\r\n      request.onsuccess = event => {\r\n        resolve(request.result);\r\n      };\r\n    })\r\n  }\r\n\r\n  async deleteTimer(id, callback) {\r\n    return new Promise((resolve, reject) => {\r\n      const request = this.startTransation().objectStore(this.storeName).delete(id);\r\n      request.onsuccess = event => {\r\n        resolve();\r\n      };\r\n      request.onerror = event => {\r\n        reject(event);\r\n      };\r\n    })\r\n  }\r\n\r\n  addTimer(timer) {\r\n    const transaction = this.startTransation();\r\n    const objectStore = transaction.objectStore(this.storeName);\r\n\r\n    objectStore.add(timer);\r\n  }\r\n\r\n  async saveTimers() {\r\n    return new Promise(async (resolve, reject) => {\r\n      const transaction = this.startTransation();\r\n      const objectStore = transaction.objectStore(this.storeName);\r\n\r\n      for(let timer of this.state.timers) {\r\n        const requestUpdate = objectStore.put(timer);\r\n        requestUpdate.onerror = event => {\r\n          console.error(event.target.error);\r\n        };\r\n        requestUpdate.onsuccess = event => {};\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nconst stateObject = {\r\n  currentTimer: null,\r\n  timers: []\r\n};\r\n\r\nconst db = new DB(stateObject);\r\ndb.onready = () => {\r\n  globalThis.addEventListener('statechange', e => {\r\n    db.getTimers().then(dbTimers => {\r\n      const diff = getArrayDiff(stateObject.timers, dbTimers);\r\n      const deletedTimers = diff[0];\r\n      const addedTimers = diff[1];\r\n\r\n      for (let timer of deletedTimers) {\r\n        db.deleteTimer(timer.id);\r\n      }\r\n      for (let timer of addedTimers) {\r\n        db.addTimer(timer);\r\n      }\r\n    })\r\n  });\r\n  db.getTimers().then(timers => {\r\n    stateObject.timers = timers;\r\n    State.setState(stateObject);\r\n  });\r\n}\r\n\r\nclass TimerEvent extends Event {\r\n  constructor(timer) {\r\n    super('timer.finished');\r\n    this.timer = timer;\r\n  }\r\n}\r\n\r\nsetInterval(async () => {\r\n  const state = await State.getState();\r\n\r\n  for (let timer of state.timers) {\r\n    const time = getTimerTime(timer);\r\n\r\n    if (time <= 0 && timer.state == 1) {\r\n      timer.state = 0;\r\n      State.setState(stateObject);\r\n      const evnt = new TimerEvent(timer);\r\n      globalThis.dispatchEvent(evnt);\r\n    }\r\n  }\r\n\r\n  globalThis.dispatchEvent(new Event('tick'));\r\n}, 1000);\r\n\r\nexport default class State {\r\n\r\n  static setState(state) {\r\n    if(globalThis.parent == globalThis.parent) {\r\n      db.saveTimers();\r\n    }\r\n    globalThis.dispatchEvent(new Event('statechange'));\r\n  }\r\n\r\n  static async getState() {\r\n    const state = Object.assign(stateObject, { timers: await db.getTimers() });\r\n    return state;\r\n  }\r\n\r\n  static async createTimer(options = {\r\n    length: 1000 * 60, // ms\r\n    title: \"Timer\",\r\n    timestamp: 0,\r\n    state: 0,\r\n    duration: 0,\r\n  }) {\r\n    const state = await this.getState();\r\n    options.id = uuidv4();\r\n    state.timers.push(options);\r\n    this.setState(state);\r\n  }\r\n\r\n  static async updateTimer(timerId, options) {\r\n    const state = await this.getState();\r\n    const timer = await this.getTimerById(timerId);\r\n    const index = state.timers.indexOf(timer);\r\n    state.timers[index] = Object.assign(timer, options);\r\n    this.setState(state);\r\n  }\r\n\r\n  static async deleteTimer(timerId) {\r\n    const timer = await this.getTimerById(timerId);\r\n    const state = await this.getState();\r\n    state.timers.splice(state.timers.indexOf(timer), 1);\r\n    this.setState(state);\r\n  }\r\n\r\n  static async startTimer(timerId) {\r\n    const timer = await this.getTimerById(timerId);\r\n    timer.timestamp = Date.now();\r\n    timer.state = 1;\r\n    this.setState(stateObject);\r\n  }\r\n\r\n  static async stopTimer(timerId) {\r\n    const timer = await this.getTimerById(timerId);\r\n    timer.duration = Date.now() - timer.timestamp;\r\n    timer.state = 0;\r\n    this.setState(stateObject);\r\n  }\r\n\r\n  static async resetTimer(timerId) {\r\n    const timer = await this.getTimerById(timerId);\r\n    timer.duration = 0;\r\n    timer.timestamp = Date.now();\r\n    this.setState(stateObject);\r\n  }\r\n\r\n  static async getTimerById(id) {\r\n    const state = await this.getState();\r\n    return state.timers.find(timer => {\r\n      return timer.id == id;\r\n    });\r\n  }\r\n\r\n}\r\n","import State from './State.js';\r\n\r\nself.addEventListener('install', e => {\r\n  e.waitUntil(caches.open('timers-cache')\r\n    .then(cache => cache.addAll([\r\n      './',\r\n      './index.html',\r\n      './main.css',\r\n      './main.js'\r\n    ])));\r\n});\r\n\r\nself.addEventListener('fetch', event => {\r\n  event.respondWith(caches.match(event.request)\r\n    .then(response => (response || fetch(event.request))));\r\n});\r\n\r\nself.addEventListener('activate', event => {\r\n  globalThis.addEventListener('timer.finished', event => {\r\n    console.log(event);\r\n    sendTimerNotification(event.timer);\r\n  });\r\n});\r\n\r\nfunction sendTimerNotification(timer) {\r\n  self.registration.showNotification(\"Timers\", {\r\n    body: `Timer \"${timer.title}\" is done.`,\r\n    vibrate: true,\r\n    requireInteraction: true,\r\n    actions: [\r\n      {\r\n        action: 'stop',\r\n        title: 'Stop'\r\n      }\r\n    ]\r\n  });\r\n\r\n  self.addEventListener('notificationclick', event => {\r\n    event.notification.close();\r\n  }, false);\r\n}\r\n"]}